.. JavaJo201805 documentation master file, created by
   sphinx-quickstart on Sat May 12 22:46:52 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

========================================
広がるPython（Python Big Bang）
========================================

| Kameko Ohmura
| https://github.com/okusama27


お前誰よ（Who am I?）
============================

.. image:: _static/images/cow.png
   :width: 50px


大村亀子といいます。 `@okusama27 <https://twitter.com/okusama27>`_

BeProudで働いています。

Pythonオンライン学習サービスを作っています。

I'm Kameko Ohmura, please call me "kame-chan".

I'm working at `BeProud, inc. <https://www.beproud.jp/>`_

I'm developing Python web-learning service

.. image:: _static/images/logo_beproud.png
   :width: 200px

歴史
=======

はじまり
==============

1989年
---------------

オランダ人の `Guido van Rossum <https://en.wikipedia.org/wiki/Guido_van_Rossum>`_ がクリスマス休暇中に暇だったので開発を開始したのがはじまり。

イギリスで大人気だったテレビ番組「空飛ぶモンティ・パイソン」（Monty Python's Flying Circus）から取って、Pythonと名付けた。

.. image:: _static/images/python-logo-master-v3-TM.png
   :width: 300px

.. パイソンとは「ニシキヘビ」のことなので、Python関連のライブラリやアプリケーション、コミュニティーのシンボルるに蛇にちなんだアイコンが使われます。


2001年
-------------

Pythonソフトウェア財団、PSF（ `PythonSoftwareFoundation <https://www.python.org/psf/>`_ ）が組織される。

Python関連の知的所有権を所有するために作られた非営利団体。
Pythonのリリースはすべて `オープンソース <https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E5%AE%9A%E7%BE%A9>`_ である。

.. Pythonは1990年代初頭に、オランダのStichtingMathematischCentrum(CWI。http://www.cwi.nl/参照)にいたGuidovanRossumにより、
   ABCという言語の後継として創造された。
   現在Pythonには他者からのコントリビューションが数多く含まれるが、第一著者は依然としてGuidoである。
   Guidoは1995年からヴァージニア州レストンにあるCorporationforNationalResearchInitiatives(CNRI。http://www.cnri.reston.va.us/参照)でPythonの作業を続け、ここでいくつかのバージョンをリリースした。
   2000年、GuidoとPythonコア開発チームはBeOpen.comに移り、BeOpenPythonLabsチームを結成した。
   同年10月、PythonLabsチームはDigitalCreation(現在はZopeCorporation。http://www.zope.com/参照)に移った。
   2001年、PythonSoftwareFoundation(PSF。https://www.python.org/psf/参照)が組織される。
   これはPython関連の知的所有権を所有するために作られたNPO団体である。ZopeCorporationはPSFの後援会員である。
   PythonのリリースはすべてOpenSourceである(大文字に注意。オープンソースの定義についてはhttp://opensource.org/参照)。
   歴史的には、ほとんどのPythonリリースはGPLコンパチブルだが、すべてがそうではない。
   「GPLコンパチブル」とは、我々がPythonをGPLで配布するという意味ではない。Pythonは全ライセンスにおいて、
   改変部分をオープンソースとしない改変版の配布を認めているが、これはGPLとは異なる。
   GPLコンパチブルなライセンスとは、PythonをGPLでリリースされたソフトウェアと組み合わせることを可能にするものである。
   コンパチブルでないライセンスでは不可能ということだ。
   Guidoの指揮のもと作業を行い、これらのリリースを可能にしてくれた数多くの外部ボランティアに感謝する。


バージョン
===============
1991年: バージョン 0.9x
-----------------------------

Guidoさんが、ソースコードを公開

1994年: バージョン 1.x
-----------------------------

2000年: バージョン 2.x
-----------------------------

サポートは2020年までと発表されている。（ `PEP404 <https://www.python.org/dev/peps/pep-0404/>`_ ）

2008年: バージョン 3.x
-----------------------------

言語を掃除してリフレッシュすることが目的としてリリースされた。

Python2.xとの後方互換が失われていることでPython2系から気軽にPython3系に以降できない問題がある。

.. Python3 系列は従来の Python1.x/2.x にあったいろいろな問題点を解決し、より優れた Python として生まれ変わりました。
   文字列の全面的な Unicode 化や、冗長な文法要素の改善、標準ライブラリの再構成など、多くの改善が加えられています。

.. RedHat Enterprise Linuxでは、Python2.7を2024年までサポートすることが決まっている。


Pythonは母体となる企業、営利団体もなしに長期間に渡って開発を継続し、安定したリリースを続けています。

思想
=====

キャッチフレーズ
==========================

1990年台に使われていたPythonのキャッチフレーズ

**Python gets the job done**

「Pythonは仕事を終らせる」という意味。

現実に処理しなければいけない仕事を片付けるために用意された実用品。
Pythonは華やかさよりも、シンプルな機能美を信条としています。

The Zen of Python
==========================

対話型インタプリタに ``import this`` と打つと、Pythonの哲学が表示される。

The Zen of Python, by Tim Peters（抜粋）
-------------------------------------------

* 醜いより美しい方がいい。
* 暗黙より明示の方がいい。
* 複雑より単純の方がいい。
* 読みやすさは大切だ。
* 実用性は純粋性に勝る。
* 仕事をするための当然の方法はひとつある。

（略）

私も翻訳してみました。 `The Zen of Python <http://kamekokamekame.net/python/2017/12/01/article.html>`_

特徴
=============

分類
================

* 手続き型言語
* オブジェクト指向プログラミング
* 動的型システム
* インタープリタ
* オープンソース

.. Python は動的型システムを持つインタープリタで、コンソールを使った対話的な操作もできる ことから、
   システム管理などの、一度限りの書き捨て処理を行うスクリプト言語としても使われます。
   しかし、本格的な汎用プログラミング言語としても、大規模なウェブアプリケーションや、
   企 業の業務アプリケーションなどの開発言語として、広く利用されています。
   Python はなぜ今のような、人気の高いプログラミング言語になったのでしょうか。
   その理由と して、以下の様な理由があげられます。

読みやすい
================

* 見ただけで意味が理解できるように、普通のアルファベットの英単語で書ける様になっている。
* 見ただけで意味がわからない記号はなるべく使わない

インデント
--------------
* 賛否両論はありますが、インデントを正しく付けないと動かないのは誰が書いても同じようなコードになり読みやすいです。
* 初心者のうちは「人が書いたコードが読みやすい」は学習しやすい要因の1つです。

シンプル
================

* 言語機能はシンプルに抑え、ライブラリでできる機能はなるべくライブラリで提供する。
* 明確なやり方はできるだけ1つのやり方になるように配慮している

高レベル言語
================

* データ型もオブジェクトとして統一されたインターフェースで扱える
* メモリの取得・開放などの管理は自動化されている（ガベージコレクションがある）
* クラスの定義、継承などのオブジェクト指向プログラミング機能をサポート
* 例外処理
* パッケージ、名前空間

エコシステム
================

* Pythonだけを用意すれば、いろいろな用途で使えるようになっている

マルチプラットフォーム
================================

* 移植性が高い。
* MacOS, Windows, Linux
* モバイル端末


言語仕様の決め方
==========================

流れ
===========

TODO: 図

メーリングリスト→PEP


.. 1.3 PEP文書から最新の変更情報を得る
   Python コミュニティは変化を取り入れるための、成熟したメカニズムを備えています。ちょっとし た Python の言語に関するアイデアは特定のメーリングリスト(python-ideas@python.org)で議論 されますが、大きな変更が行われるときは、必ず PEP と呼ばれる文書が書かれることになっていま す。PEP は Python 拡張提案(Python Enhancement Proposal)の略語です。PEP は Python に変更 を加えるための提案書で、コミュニティが議論を行うための出発点となります。PEP の目的、フォー マット、ワークフローといったもの自身も、Python 拡張提案の形式で標準化されています。詳しくは PEP 1(https://www.python.org/dev/peps/pep-0001)を参照してください∗5。
   PEP の各文書は Python にとって非常に重要なものです。それぞれの文書はトピックに応じていく つかの目的を持ちます。
   ● 通知(Informing):Python のリリーススケジュールについて、コア Python の開発者が必要な情 報をまとめて伝えます。
   ● 標準化(Standardizing):コードスタイル、ドキュメント、またはその他のガイドラインを提供 します。
   ● 設計(Designing):提案された機能について説明します。
   提案されたすべての PEP のリストは、PEP 0(https://www.python.org/dev/peps/)にあります。 PEP 文書は 1 カ所に集約されていて、実際の URL を推測するのも簡単なので、本書の中では番号を 使って参照します。
   Python 言語がどこに向かっているか興味があるけれど、Python メーリングリストで行われる議論 の流れをすべて追いかける時間を持てない人にとって、PEP 0 は情報の宝庫です。この文書を読むと、 すでに承認されているがまだ実装されていない PEP 文書や、現在検討中の PEP 文書もわかります。
   PEP はこれ以外にも役立ちます。たとえば、次のような質問が頻繁に行われます。
   ● なぜ機能 A はこのようになっているんですか?
   ● なぜ Python には機能 B がないんですか?
   ほとんどのケースで、質問の答えが書かれた PEP 文書を見つけられます。提案されたけれど、受理 されなかった Python 言語機能を紹介した PEP 文書もたくさんあります。これらの文書は歴史的な文 献として残されています。



